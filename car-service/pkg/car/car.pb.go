// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.21.12
// source: car.proto

package car

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Car struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           string        `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Brand        *Brand        `protobuf:"bytes,2,opt,name=brand,proto3,oneof" json:"brand,omitempty"`
	Series       *Series       `protobuf:"bytes,3,opt,name=series,proto3,oneof" json:"series,omitempty"`
	Name         string        `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	Year         *int32        `protobuf:"varint,5,opt,name=year,proto3,oneof" json:"year,omitempty"`
	HorsePower   *int32        `protobuf:"varint,6,opt,name=horse_power,json=horsePower,proto3,oneof" json:"horse_power,omitempty"`
	Torque       *int32        `protobuf:"varint,7,opt,name=torque,proto3,oneof" json:"torque,omitempty"`
	Transmission *Transmission `protobuf:"bytes,8,opt,name=transmission,proto3,oneof" json:"transmission,omitempty"`
	FuelType     *FuelType     `protobuf:"bytes,9,opt,name=fuelType,proto3,oneof" json:"fuelType,omitempty"`
	ImageUrl     *string       `protobuf:"bytes,10,opt,name=imageUrl,proto3,oneof" json:"imageUrl,omitempty"`
	Review       *string       `protobuf:"bytes,11,opt,name=review,proto3,oneof" json:"review,omitempty"`
}

func (x *Car) Reset() {
	*x = Car{}
	if protoimpl.UnsafeEnabled {
		mi := &file_car_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Car) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Car) ProtoMessage() {}

func (x *Car) ProtoReflect() protoreflect.Message {
	mi := &file_car_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Car.ProtoReflect.Descriptor instead.
func (*Car) Descriptor() ([]byte, []int) {
	return file_car_proto_rawDescGZIP(), []int{0}
}

func (x *Car) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Car) GetBrand() *Brand {
	if x != nil {
		return x.Brand
	}
	return nil
}

func (x *Car) GetSeries() *Series {
	if x != nil {
		return x.Series
	}
	return nil
}

func (x *Car) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Car) GetYear() int32 {
	if x != nil && x.Year != nil {
		return *x.Year
	}
	return 0
}

func (x *Car) GetHorsePower() int32 {
	if x != nil && x.HorsePower != nil {
		return *x.HorsePower
	}
	return 0
}

func (x *Car) GetTorque() int32 {
	if x != nil && x.Torque != nil {
		return *x.Torque
	}
	return 0
}

func (x *Car) GetTransmission() *Transmission {
	if x != nil {
		return x.Transmission
	}
	return nil
}

func (x *Car) GetFuelType() *FuelType {
	if x != nil {
		return x.FuelType
	}
	return nil
}

func (x *Car) GetImageUrl() string {
	if x != nil && x.ImageUrl != nil {
		return *x.ImageUrl
	}
	return ""
}

func (x *Car) GetReview() string {
	if x != nil && x.Review != nil {
		return *x.Review
	}
	return ""
}

type Brand struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id              string  `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name            string  `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	CountryOfOrigin *string `protobuf:"bytes,3,opt,name=countryOfOrigin,proto3,oneof" json:"countryOfOrigin,omitempty"`
	FoundedYear     *int32  `protobuf:"varint,4,opt,name=foundedYear,proto3,oneof" json:"foundedYear,omitempty"`
	WebsiteUrl      *string `protobuf:"bytes,5,opt,name=websiteUrl,proto3,oneof" json:"websiteUrl,omitempty"`
	LogoUrl         *string `protobuf:"bytes,6,opt,name=logoUrl,proto3,oneof" json:"logoUrl,omitempty"`
}

func (x *Brand) Reset() {
	*x = Brand{}
	if protoimpl.UnsafeEnabled {
		mi := &file_car_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Brand) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Brand) ProtoMessage() {}

func (x *Brand) ProtoReflect() protoreflect.Message {
	mi := &file_car_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Brand.ProtoReflect.Descriptor instead.
func (*Brand) Descriptor() ([]byte, []int) {
	return file_car_proto_rawDescGZIP(), []int{1}
}

func (x *Brand) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Brand) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Brand) GetCountryOfOrigin() string {
	if x != nil && x.CountryOfOrigin != nil {
		return *x.CountryOfOrigin
	}
	return ""
}

func (x *Brand) GetFoundedYear() int32 {
	if x != nil && x.FoundedYear != nil {
		return *x.FoundedYear
	}
	return 0
}

func (x *Brand) GetWebsiteUrl() string {
	if x != nil && x.WebsiteUrl != nil {
		return *x.WebsiteUrl
	}
	return ""
}

func (x *Brand) GetLogoUrl() string {
	if x != nil && x.LogoUrl != nil {
		return *x.LogoUrl
	}
	return ""
}

type Series struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id      string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name    string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	BrandId int32  `protobuf:"varint,3,opt,name=brandId,proto3" json:"brandId,omitempty"`
}

func (x *Series) Reset() {
	*x = Series{}
	if protoimpl.UnsafeEnabled {
		mi := &file_car_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Series) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Series) ProtoMessage() {}

func (x *Series) ProtoReflect() protoreflect.Message {
	mi := &file_car_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Series.ProtoReflect.Descriptor instead.
func (*Series) Descriptor() ([]byte, []int) {
	return file_car_proto_rawDescGZIP(), []int{2}
}

func (x *Series) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Series) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Series) GetBrandId() int32 {
	if x != nil {
		return x.BrandId
	}
	return 0
}

type Transmission struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          int32   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name        string  `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Description *string `protobuf:"bytes,3,opt,name=description,proto3,oneof" json:"description,omitempty"`
}

func (x *Transmission) Reset() {
	*x = Transmission{}
	if protoimpl.UnsafeEnabled {
		mi := &file_car_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Transmission) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Transmission) ProtoMessage() {}

func (x *Transmission) ProtoReflect() protoreflect.Message {
	mi := &file_car_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Transmission.ProtoReflect.Descriptor instead.
func (*Transmission) Descriptor() ([]byte, []int) {
	return file_car_proto_rawDescGZIP(), []int{3}
}

func (x *Transmission) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Transmission) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Transmission) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

type FuelType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          int32   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name        string  `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Description *string `protobuf:"bytes,3,opt,name=description,proto3,oneof" json:"description,omitempty"`
}

func (x *FuelType) Reset() {
	*x = FuelType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_car_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FuelType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FuelType) ProtoMessage() {}

func (x *FuelType) ProtoReflect() protoreflect.Message {
	mi := &file_car_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FuelType.ProtoReflect.Descriptor instead.
func (*FuelType) Descriptor() ([]byte, []int) {
	return file_car_proto_rawDescGZIP(), []int{4}
}

func (x *FuelType) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *FuelType) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *FuelType) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

type Empty struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Empty) Reset() {
	*x = Empty{}
	if protoimpl.UnsafeEnabled {
		mi := &file_car_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Empty) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Empty) ProtoMessage() {}

func (x *Empty) ProtoReflect() protoreflect.Message {
	mi := &file_car_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Empty.ProtoReflect.Descriptor instead.
func (*Empty) Descriptor() ([]byte, []int) {
	return file_car_proto_rawDescGZIP(), []int{5}
}

type GetCarReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GetCarReq) Reset() {
	*x = GetCarReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_car_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCarReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCarReq) ProtoMessage() {}

func (x *GetCarReq) ProtoReflect() protoreflect.Message {
	mi := &file_car_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCarReq.ProtoReflect.Descriptor instead.
func (*GetCarReq) Descriptor() ([]byte, []int) {
	return file_car_proto_rawDescGZIP(), []int{6}
}

func (x *GetCarReq) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

type CreateCarReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BrandId      *int32        `protobuf:"varint,1,opt,name=brandId,proto3,oneof" json:"brandId,omitempty"`
	SeriesId     *int32        `protobuf:"varint,2,opt,name=seriesId,proto3,oneof" json:"seriesId,omitempty"`
	Name         string        `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Year         *int32        `protobuf:"varint,4,opt,name=year,proto3,oneof" json:"year,omitempty"`
	HorsePower   *int32        `protobuf:"varint,5,opt,name=horse_power,json=horsePower,proto3,oneof" json:"horse_power,omitempty"`
	Torque       *int32        `protobuf:"varint,6,opt,name=torque,proto3,oneof" json:"torque,omitempty"`
	Transmission *Transmission `protobuf:"bytes,7,opt,name=transmission,proto3,oneof" json:"transmission,omitempty"`
	FuelType     *FuelType     `protobuf:"bytes,8,opt,name=fuelType,proto3,oneof" json:"fuelType,omitempty"`
	ImageUrl     *string       `protobuf:"bytes,9,opt,name=imageUrl,proto3,oneof" json:"imageUrl,omitempty"`
	Review       *string       `protobuf:"bytes,10,opt,name=review,proto3,oneof" json:"review,omitempty"`
}

func (x *CreateCarReq) Reset() {
	*x = CreateCarReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_car_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateCarReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateCarReq) ProtoMessage() {}

func (x *CreateCarReq) ProtoReflect() protoreflect.Message {
	mi := &file_car_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateCarReq.ProtoReflect.Descriptor instead.
func (*CreateCarReq) Descriptor() ([]byte, []int) {
	return file_car_proto_rawDescGZIP(), []int{7}
}

func (x *CreateCarReq) GetBrandId() int32 {
	if x != nil && x.BrandId != nil {
		return *x.BrandId
	}
	return 0
}

func (x *CreateCarReq) GetSeriesId() int32 {
	if x != nil && x.SeriesId != nil {
		return *x.SeriesId
	}
	return 0
}

func (x *CreateCarReq) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateCarReq) GetYear() int32 {
	if x != nil && x.Year != nil {
		return *x.Year
	}
	return 0
}

func (x *CreateCarReq) GetHorsePower() int32 {
	if x != nil && x.HorsePower != nil {
		return *x.HorsePower
	}
	return 0
}

func (x *CreateCarReq) GetTorque() int32 {
	if x != nil && x.Torque != nil {
		return *x.Torque
	}
	return 0
}

func (x *CreateCarReq) GetTransmission() *Transmission {
	if x != nil {
		return x.Transmission
	}
	return nil
}

func (x *CreateCarReq) GetFuelType() *FuelType {
	if x != nil {
		return x.FuelType
	}
	return nil
}

func (x *CreateCarReq) GetImageUrl() string {
	if x != nil && x.ImageUrl != nil {
		return *x.ImageUrl
	}
	return ""
}

func (x *CreateCarReq) GetReview() string {
	if x != nil && x.Review != nil {
		return *x.Review
	}
	return ""
}

type UpdateCarReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           int32         `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	BrandId      *int32        `protobuf:"varint,2,opt,name=brandId,proto3,oneof" json:"brandId,omitempty"`
	SeriesId     *int32        `protobuf:"varint,3,opt,name=seriesId,proto3,oneof" json:"seriesId,omitempty"`
	Name         *string       `protobuf:"bytes,4,opt,name=name,proto3,oneof" json:"name,omitempty"`
	Year         *int32        `protobuf:"varint,5,opt,name=year,proto3,oneof" json:"year,omitempty"`
	HorsePower   *int32        `protobuf:"varint,6,opt,name=horse_power,json=horsePower,proto3,oneof" json:"horse_power,omitempty"`
	Torque       *int32        `protobuf:"varint,7,opt,name=torque,proto3,oneof" json:"torque,omitempty"`
	Transmission *Transmission `protobuf:"bytes,8,opt,name=transmission,proto3,oneof" json:"transmission,omitempty"`
	FuelType     *FuelType     `protobuf:"bytes,9,opt,name=fuelType,proto3,oneof" json:"fuelType,omitempty"`
	ImageUrl     *string       `protobuf:"bytes,10,opt,name=imageUrl,proto3,oneof" json:"imageUrl,omitempty"`
	Review       *string       `protobuf:"bytes,11,opt,name=review,proto3,oneof" json:"review,omitempty"`
}

func (x *UpdateCarReq) Reset() {
	*x = UpdateCarReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_car_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateCarReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateCarReq) ProtoMessage() {}

func (x *UpdateCarReq) ProtoReflect() protoreflect.Message {
	mi := &file_car_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateCarReq.ProtoReflect.Descriptor instead.
func (*UpdateCarReq) Descriptor() ([]byte, []int) {
	return file_car_proto_rawDescGZIP(), []int{8}
}

func (x *UpdateCarReq) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *UpdateCarReq) GetBrandId() int32 {
	if x != nil && x.BrandId != nil {
		return *x.BrandId
	}
	return 0
}

func (x *UpdateCarReq) GetSeriesId() int32 {
	if x != nil && x.SeriesId != nil {
		return *x.SeriesId
	}
	return 0
}

func (x *UpdateCarReq) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *UpdateCarReq) GetYear() int32 {
	if x != nil && x.Year != nil {
		return *x.Year
	}
	return 0
}

func (x *UpdateCarReq) GetHorsePower() int32 {
	if x != nil && x.HorsePower != nil {
		return *x.HorsePower
	}
	return 0
}

func (x *UpdateCarReq) GetTorque() int32 {
	if x != nil && x.Torque != nil {
		return *x.Torque
	}
	return 0
}

func (x *UpdateCarReq) GetTransmission() *Transmission {
	if x != nil {
		return x.Transmission
	}
	return nil
}

func (x *UpdateCarReq) GetFuelType() *FuelType {
	if x != nil {
		return x.FuelType
	}
	return nil
}

func (x *UpdateCarReq) GetImageUrl() string {
	if x != nil && x.ImageUrl != nil {
		return *x.ImageUrl
	}
	return ""
}

func (x *UpdateCarReq) GetReview() string {
	if x != nil && x.Review != nil {
		return *x.Review
	}
	return ""
}

type DeleteCarReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *DeleteCarReq) Reset() {
	*x = DeleteCarReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_car_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteCarReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteCarReq) ProtoMessage() {}

func (x *DeleteCarReq) ProtoReflect() protoreflect.Message {
	mi := &file_car_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteCarReq.ProtoReflect.Descriptor instead.
func (*DeleteCarReq) Descriptor() ([]byte, []int) {
	return file_car_proto_rawDescGZIP(), []int{9}
}

func (x *DeleteCarReq) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type GetBrandReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GetBrandReq) Reset() {
	*x = GetBrandReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_car_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBrandReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBrandReq) ProtoMessage() {}

func (x *GetBrandReq) ProtoReflect() protoreflect.Message {
	mi := &file_car_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBrandReq.ProtoReflect.Descriptor instead.
func (*GetBrandReq) Descriptor() ([]byte, []int) {
	return file_car_proto_rawDescGZIP(), []int{10}
}

func (x *GetBrandReq) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

type CreateBrandReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name            string  `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	CountryOfOrigin *string `protobuf:"bytes,2,opt,name=countryOfOrigin,proto3,oneof" json:"countryOfOrigin,omitempty"`
	FoundedYear     *int32  `protobuf:"varint,3,opt,name=foundedYear,proto3,oneof" json:"foundedYear,omitempty"`
	WebsiteUrl      *string `protobuf:"bytes,4,opt,name=websiteUrl,proto3,oneof" json:"websiteUrl,omitempty"`
	LogoUrl         *string `protobuf:"bytes,5,opt,name=logoUrl,proto3,oneof" json:"logoUrl,omitempty"`
}

func (x *CreateBrandReq) Reset() {
	*x = CreateBrandReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_car_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateBrandReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateBrandReq) ProtoMessage() {}

func (x *CreateBrandReq) ProtoReflect() protoreflect.Message {
	mi := &file_car_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateBrandReq.ProtoReflect.Descriptor instead.
func (*CreateBrandReq) Descriptor() ([]byte, []int) {
	return file_car_proto_rawDescGZIP(), []int{11}
}

func (x *CreateBrandReq) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateBrandReq) GetCountryOfOrigin() string {
	if x != nil && x.CountryOfOrigin != nil {
		return *x.CountryOfOrigin
	}
	return ""
}

func (x *CreateBrandReq) GetFoundedYear() int32 {
	if x != nil && x.FoundedYear != nil {
		return *x.FoundedYear
	}
	return 0
}

func (x *CreateBrandReq) GetWebsiteUrl() string {
	if x != nil && x.WebsiteUrl != nil {
		return *x.WebsiteUrl
	}
	return ""
}

func (x *CreateBrandReq) GetLogoUrl() string {
	if x != nil && x.LogoUrl != nil {
		return *x.LogoUrl
	}
	return ""
}

type UpdateBrandReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id              *string `protobuf:"bytes,1,opt,name=id,proto3,oneof" json:"id,omitempty"`
	Name            *string `protobuf:"bytes,2,opt,name=name,proto3,oneof" json:"name,omitempty"`
	CountryOfOrigin *string `protobuf:"bytes,3,opt,name=countryOfOrigin,proto3,oneof" json:"countryOfOrigin,omitempty"`
	FoundedYear     *int32  `protobuf:"varint,4,opt,name=foundedYear,proto3,oneof" json:"foundedYear,omitempty"`
	WebsiteUrl      *string `protobuf:"bytes,5,opt,name=websiteUrl,proto3,oneof" json:"websiteUrl,omitempty"`
	LogoUrl         *string `protobuf:"bytes,6,opt,name=logoUrl,proto3,oneof" json:"logoUrl,omitempty"`
}

func (x *UpdateBrandReq) Reset() {
	*x = UpdateBrandReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_car_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateBrandReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateBrandReq) ProtoMessage() {}

func (x *UpdateBrandReq) ProtoReflect() protoreflect.Message {
	mi := &file_car_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateBrandReq.ProtoReflect.Descriptor instead.
func (*UpdateBrandReq) Descriptor() ([]byte, []int) {
	return file_car_proto_rawDescGZIP(), []int{12}
}

func (x *UpdateBrandReq) GetId() string {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return ""
}

func (x *UpdateBrandReq) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *UpdateBrandReq) GetCountryOfOrigin() string {
	if x != nil && x.CountryOfOrigin != nil {
		return *x.CountryOfOrigin
	}
	return ""
}

func (x *UpdateBrandReq) GetFoundedYear() int32 {
	if x != nil && x.FoundedYear != nil {
		return *x.FoundedYear
	}
	return 0
}

func (x *UpdateBrandReq) GetWebsiteUrl() string {
	if x != nil && x.WebsiteUrl != nil {
		return *x.WebsiteUrl
	}
	return ""
}

func (x *UpdateBrandReq) GetLogoUrl() string {
	if x != nil && x.LogoUrl != nil {
		return *x.LogoUrl
	}
	return ""
}

type GetSeriesReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GetSeriesReq) Reset() {
	*x = GetSeriesReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_car_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSeriesReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSeriesReq) ProtoMessage() {}

func (x *GetSeriesReq) ProtoReflect() protoreflect.Message {
	mi := &file_car_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSeriesReq.ProtoReflect.Descriptor instead.
func (*GetSeriesReq) Descriptor() ([]byte, []int) {
	return file_car_proto_rawDescGZIP(), []int{13}
}

func (x *GetSeriesReq) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

type CreateSeriesReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name    string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	BrandId int32  `protobuf:"varint,2,opt,name=brandId,proto3" json:"brandId,omitempty"`
}

func (x *CreateSeriesReq) Reset() {
	*x = CreateSeriesReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_car_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateSeriesReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateSeriesReq) ProtoMessage() {}

func (x *CreateSeriesReq) ProtoReflect() protoreflect.Message {
	mi := &file_car_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateSeriesReq.ProtoReflect.Descriptor instead.
func (*CreateSeriesReq) Descriptor() ([]byte, []int) {
	return file_car_proto_rawDescGZIP(), []int{14}
}

func (x *CreateSeriesReq) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateSeriesReq) GetBrandId() int32 {
	if x != nil {
		return x.BrandId
	}
	return 0
}

type UpdateSeriesReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id      string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name    string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	BrandId int32  `protobuf:"varint,3,opt,name=brandId,proto3" json:"brandId,omitempty"`
}

func (x *UpdateSeriesReq) Reset() {
	*x = UpdateSeriesReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_car_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateSeriesReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateSeriesReq) ProtoMessage() {}

func (x *UpdateSeriesReq) ProtoReflect() protoreflect.Message {
	mi := &file_car_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateSeriesReq.ProtoReflect.Descriptor instead.
func (*UpdateSeriesReq) Descriptor() ([]byte, []int) {
	return file_car_proto_rawDescGZIP(), []int{15}
}

func (x *UpdateSeriesReq) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UpdateSeriesReq) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UpdateSeriesReq) GetBrandId() int32 {
	if x != nil {
		return x.BrandId
	}
	return 0
}

type SearchForCarReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Text    string `protobuf:"bytes,1,opt,name=text,proto3" json:"text,omitempty"`
	Orderby string `protobuf:"bytes,2,opt,name=orderby,proto3" json:"orderby,omitempty"`
	StartAt int32  `protobuf:"varint,3,opt,name=startAt,proto3" json:"startAt,omitempty"`
	Limit   int32  `protobuf:"varint,4,opt,name=limit,proto3" json:"limit,omitempty"`
}

func (x *SearchForCarReq) Reset() {
	*x = SearchForCarReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_car_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchForCarReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchForCarReq) ProtoMessage() {}

func (x *SearchForCarReq) ProtoReflect() protoreflect.Message {
	mi := &file_car_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchForCarReq.ProtoReflect.Descriptor instead.
func (*SearchForCarReq) Descriptor() ([]byte, []int) {
	return file_car_proto_rawDescGZIP(), []int{16}
}

func (x *SearchForCarReq) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

func (x *SearchForCarReq) GetOrderby() string {
	if x != nil {
		return x.Orderby
	}
	return ""
}

func (x *SearchForCarReq) GetStartAt() int32 {
	if x != nil {
		return x.StartAt
	}
	return 0
}

func (x *SearchForCarReq) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

type SearchForBrandReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Text    string `protobuf:"bytes,1,opt,name=text,proto3" json:"text,omitempty"`
	Orderby string `protobuf:"bytes,2,opt,name=orderby,proto3" json:"orderby,omitempty"`
	StartAt int32  `protobuf:"varint,3,opt,name=startAt,proto3" json:"startAt,omitempty"`
	Limit   int32  `protobuf:"varint,4,opt,name=limit,proto3" json:"limit,omitempty"`
}

func (x *SearchForBrandReq) Reset() {
	*x = SearchForBrandReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_car_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchForBrandReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchForBrandReq) ProtoMessage() {}

func (x *SearchForBrandReq) ProtoReflect() protoreflect.Message {
	mi := &file_car_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchForBrandReq.ProtoReflect.Descriptor instead.
func (*SearchForBrandReq) Descriptor() ([]byte, []int) {
	return file_car_proto_rawDescGZIP(), []int{17}
}

func (x *SearchForBrandReq) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

func (x *SearchForBrandReq) GetOrderby() string {
	if x != nil {
		return x.Orderby
	}
	return ""
}

func (x *SearchForBrandReq) GetStartAt() int32 {
	if x != nil {
		return x.StartAt
	}
	return 0
}

func (x *SearchForBrandReq) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

type SearchForSeriesReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Text    string `protobuf:"bytes,1,opt,name=text,proto3" json:"text,omitempty"`
	Orderby string `protobuf:"bytes,2,opt,name=orderby,proto3" json:"orderby,omitempty"`
	StartAt int32  `protobuf:"varint,3,opt,name=startAt,proto3" json:"startAt,omitempty"`
	Limit   int32  `protobuf:"varint,4,opt,name=limit,proto3" json:"limit,omitempty"`
}

func (x *SearchForSeriesReq) Reset() {
	*x = SearchForSeriesReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_car_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchForSeriesReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchForSeriesReq) ProtoMessage() {}

func (x *SearchForSeriesReq) ProtoReflect() protoreflect.Message {
	mi := &file_car_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchForSeriesReq.ProtoReflect.Descriptor instead.
func (*SearchForSeriesReq) Descriptor() ([]byte, []int) {
	return file_car_proto_rawDescGZIP(), []int{18}
}

func (x *SearchForSeriesReq) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

func (x *SearchForSeriesReq) GetOrderby() string {
	if x != nil {
		return x.Orderby
	}
	return ""
}

func (x *SearchForSeriesReq) GetStartAt() int32 {
	if x != nil {
		return x.StartAt
	}
	return 0
}

func (x *SearchForSeriesReq) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

type SearchForCarRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cars  []*Car `protobuf:"bytes,1,rep,name=cars,proto3" json:"cars,omitempty"`
	Total int32  `protobuf:"varint,2,opt,name=total,proto3" json:"total,omitempty"`
}

func (x *SearchForCarRes) Reset() {
	*x = SearchForCarRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_car_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchForCarRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchForCarRes) ProtoMessage() {}

func (x *SearchForCarRes) ProtoReflect() protoreflect.Message {
	mi := &file_car_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchForCarRes.ProtoReflect.Descriptor instead.
func (*SearchForCarRes) Descriptor() ([]byte, []int) {
	return file_car_proto_rawDescGZIP(), []int{19}
}

func (x *SearchForCarRes) GetCars() []*Car {
	if x != nil {
		return x.Cars
	}
	return nil
}

func (x *SearchForCarRes) GetTotal() int32 {
	if x != nil {
		return x.Total
	}
	return 0
}

type SearchForBrandRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Brands []*Brand `protobuf:"bytes,1,rep,name=brands,proto3" json:"brands,omitempty"`
	Total  int32    `protobuf:"varint,2,opt,name=total,proto3" json:"total,omitempty"`
}

func (x *SearchForBrandRes) Reset() {
	*x = SearchForBrandRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_car_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchForBrandRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchForBrandRes) ProtoMessage() {}

func (x *SearchForBrandRes) ProtoReflect() protoreflect.Message {
	mi := &file_car_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchForBrandRes.ProtoReflect.Descriptor instead.
func (*SearchForBrandRes) Descriptor() ([]byte, []int) {
	return file_car_proto_rawDescGZIP(), []int{20}
}

func (x *SearchForBrandRes) GetBrands() []*Brand {
	if x != nil {
		return x.Brands
	}
	return nil
}

func (x *SearchForBrandRes) GetTotal() int32 {
	if x != nil {
		return x.Total
	}
	return 0
}

type SearchForSeriesRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Series []*Series `protobuf:"bytes,1,rep,name=series,proto3" json:"series,omitempty"`
	Total  int32     `protobuf:"varint,2,opt,name=total,proto3" json:"total,omitempty"`
}

func (x *SearchForSeriesRes) Reset() {
	*x = SearchForSeriesRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_car_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchForSeriesRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchForSeriesRes) ProtoMessage() {}

func (x *SearchForSeriesRes) ProtoReflect() protoreflect.Message {
	mi := &file_car_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchForSeriesRes.ProtoReflect.Descriptor instead.
func (*SearchForSeriesRes) Descriptor() ([]byte, []int) {
	return file_car_proto_rawDescGZIP(), []int{21}
}

func (x *SearchForSeriesRes) GetSeries() []*Series {
	if x != nil {
		return x.Series
	}
	return nil
}

func (x *SearchForSeriesRes) GetTotal() int32 {
	if x != nil {
		return x.Total
	}
	return 0
}

type GetCarMetadataRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Brands       []*Brand        `protobuf:"bytes,1,rep,name=brands,proto3" json:"brands,omitempty"`
	Series       []*Series       `protobuf:"bytes,2,rep,name=series,proto3" json:"series,omitempty"`
	FuelType     []*FuelType     `protobuf:"bytes,3,rep,name=fuelType,proto3" json:"fuelType,omitempty"`
	Transmission []*Transmission `protobuf:"bytes,4,rep,name=transmission,proto3" json:"transmission,omitempty"`
}

func (x *GetCarMetadataRes) Reset() {
	*x = GetCarMetadataRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_car_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCarMetadataRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCarMetadataRes) ProtoMessage() {}

func (x *GetCarMetadataRes) ProtoReflect() protoreflect.Message {
	mi := &file_car_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCarMetadataRes.ProtoReflect.Descriptor instead.
func (*GetCarMetadataRes) Descriptor() ([]byte, []int) {
	return file_car_proto_rawDescGZIP(), []int{22}
}

func (x *GetCarMetadataRes) GetBrands() []*Brand {
	if x != nil {
		return x.Brands
	}
	return nil
}

func (x *GetCarMetadataRes) GetSeries() []*Series {
	if x != nil {
		return x.Series
	}
	return nil
}

func (x *GetCarMetadataRes) GetFuelType() []*FuelType {
	if x != nil {
		return x.FuelType
	}
	return nil
}

func (x *GetCarMetadataRes) GetTransmission() []*Transmission {
	if x != nil {
		return x.Transmission
	}
	return nil
}

var File_car_proto protoreflect.FileDescriptor

var file_car_proto_rawDesc = []byte{
	0x0a, 0x09, 0x63, 0x61, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x03, 0x63, 0x61, 0x72,
	0x22, 0xef, 0x03, 0x0a, 0x03, 0x43, 0x61, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x25, 0x0a, 0x05, 0x62, 0x72, 0x61, 0x6e,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x63, 0x61, 0x72, 0x2e, 0x42, 0x72,
	0x61, 0x6e, 0x64, 0x48, 0x00, 0x52, 0x05, 0x62, 0x72, 0x61, 0x6e, 0x64, 0x88, 0x01, 0x01, 0x12,
	0x28, 0x0a, 0x06, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0b, 0x2e, 0x63, 0x61, 0x72, 0x2e, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x48, 0x01, 0x52, 0x06,
	0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x88, 0x01, 0x01, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x17, 0x0a,
	0x04, 0x79, 0x65, 0x61, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x48, 0x02, 0x52, 0x04, 0x79,
	0x65, 0x61, 0x72, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x5f,
	0x70, 0x6f, 0x77, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x48, 0x03, 0x52, 0x0a, 0x68,
	0x6f, 0x72, 0x73, 0x65, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06,
	0x74, 0x6f, 0x72, 0x71, 0x75, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x48, 0x04, 0x52, 0x06,
	0x74, 0x6f, 0x72, 0x71, 0x75, 0x65, 0x88, 0x01, 0x01, 0x12, 0x3a, 0x0a, 0x0c, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x11, 0x2e, 0x63, 0x61, 0x72, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x6d, 0x69, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x48, 0x05, 0x52, 0x0c, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6d, 0x69, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x2e, 0x0a, 0x08, 0x66, 0x75, 0x65, 0x6c, 0x54, 0x79, 0x70,
	0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x63, 0x61, 0x72, 0x2e, 0x46, 0x75,
	0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x48, 0x06, 0x52, 0x08, 0x66, 0x75, 0x65, 0x6c, 0x54, 0x79,
	0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x55, 0x72,
	0x6c, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x48, 0x07, 0x52, 0x08, 0x69, 0x6d, 0x61, 0x67, 0x65,
	0x55, 0x72, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x48, 0x08, 0x52, 0x06, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77,
	0x88, 0x01, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x62, 0x72, 0x61, 0x6e, 0x64, 0x42, 0x09, 0x0a,
	0x07, 0x5f, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x79, 0x65, 0x61,
	0x72, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x5f, 0x70, 0x6f, 0x77, 0x65,
	0x72, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x74, 0x6f, 0x72, 0x71, 0x75, 0x65, 0x42, 0x0f, 0x0a, 0x0d,
	0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x42, 0x0b, 0x0a,
	0x09, 0x5f, 0x66, 0x75, 0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x69,
	0x6d, 0x61, 0x67, 0x65, 0x55, 0x72, 0x6c, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x72, 0x65, 0x76, 0x69,
	0x65, 0x77, 0x22, 0x84, 0x02, 0x0a, 0x05, 0x42, 0x72, 0x61, 0x6e, 0x64, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x2d, 0x0a, 0x0f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x4f, 0x66, 0x4f, 0x72, 0x69,
	0x67, 0x69, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0f, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x72, 0x79, 0x4f, 0x66, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x88, 0x01, 0x01, 0x12,
	0x25, 0x0a, 0x0b, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x65, 0x64, 0x59, 0x65, 0x61, 0x72, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x05, 0x48, 0x01, 0x52, 0x0b, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x65, 0x64, 0x59,
	0x65, 0x61, 0x72, 0x88, 0x01, 0x01, 0x12, 0x23, 0x0a, 0x0a, 0x77, 0x65, 0x62, 0x73, 0x69, 0x74,
	0x65, 0x55, 0x72, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x0a, 0x77, 0x65,
	0x62, 0x73, 0x69, 0x74, 0x65, 0x55, 0x72, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07, 0x6c,
	0x6f, 0x67, 0x6f, 0x55, 0x72, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x07,
	0x6c, 0x6f, 0x67, 0x6f, 0x55, 0x72, 0x6c, 0x88, 0x01, 0x01, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x4f, 0x66, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x42, 0x0e,
	0x0a, 0x0c, 0x5f, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x65, 0x64, 0x59, 0x65, 0x61, 0x72, 0x42, 0x0d,
	0x0a, 0x0b, 0x5f, 0x77, 0x65, 0x62, 0x73, 0x69, 0x74, 0x65, 0x55, 0x72, 0x6c, 0x42, 0x0a, 0x0a,
	0x08, 0x5f, 0x6c, 0x6f, 0x67, 0x6f, 0x55, 0x72, 0x6c, 0x22, 0x46, 0x0a, 0x06, 0x53, 0x65, 0x72,
	0x69, 0x65, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x72, 0x61, 0x6e, 0x64,
	0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x62, 0x72, 0x61, 0x6e, 0x64, 0x49,
	0x64, 0x22, 0x69, 0x0a, 0x0c, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x25, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0b, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x42, 0x0e, 0x0a, 0x0c,
	0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x65, 0x0a, 0x08,
	0x46, 0x75, 0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x25, 0x0a, 0x0b,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x00, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x88, 0x01, 0x01, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x22, 0x07, 0x0a, 0x05, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x1b, 0x0a, 0x09,
	0x47, 0x65, 0x74, 0x43, 0x61, 0x72, 0x52, 0x65, 0x71, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x22, 0xdb, 0x03, 0x0a, 0x0c, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x43, 0x61, 0x72, 0x52, 0x65, 0x71, 0x12, 0x1d, 0x0a, 0x07, 0x62, 0x72,
	0x61, 0x6e, 0x64, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x07, 0x62,
	0x72, 0x61, 0x6e, 0x64, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x73, 0x65, 0x72,
	0x69, 0x65, 0x73, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x48, 0x01, 0x52, 0x08, 0x73,
	0x65, 0x72, 0x69, 0x65, 0x73, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x17,
	0x0a, 0x04, 0x79, 0x65, 0x61, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x48, 0x02, 0x52, 0x04,
	0x79, 0x65, 0x61, 0x72, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x68, 0x6f, 0x72, 0x73, 0x65,
	0x5f, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x48, 0x03, 0x52, 0x0a,
	0x68, 0x6f, 0x72, 0x73, 0x65, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a,
	0x06, 0x74, 0x6f, 0x72, 0x71, 0x75, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x48, 0x04, 0x52,
	0x06, 0x74, 0x6f, 0x72, 0x71, 0x75, 0x65, 0x88, 0x01, 0x01, 0x12, 0x3a, 0x0a, 0x0c, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x11, 0x2e, 0x63, 0x61, 0x72, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x6d, 0x69, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x48, 0x05, 0x52, 0x0c, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6d, 0x69, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x2e, 0x0a, 0x08, 0x66, 0x75, 0x65, 0x6c, 0x54, 0x79,
	0x70, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x63, 0x61, 0x72, 0x2e, 0x46,
	0x75, 0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x48, 0x06, 0x52, 0x08, 0x66, 0x75, 0x65, 0x6c, 0x54,
	0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x55,
	0x72, 0x6c, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x48, 0x07, 0x52, 0x08, 0x69, 0x6d, 0x61, 0x67,
	0x65, 0x55, 0x72, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x72, 0x65, 0x76, 0x69, 0x65,
	0x77, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x48, 0x08, 0x52, 0x06, 0x72, 0x65, 0x76, 0x69, 0x65,
	0x77, 0x88, 0x01, 0x01, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x62, 0x72, 0x61, 0x6e, 0x64, 0x49, 0x64,
	0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x49, 0x64, 0x42, 0x07, 0x0a,
	0x05, 0x5f, 0x79, 0x65, 0x61, 0x72, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x68, 0x6f, 0x72, 0x73, 0x65,
	0x5f, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x74, 0x6f, 0x72, 0x71, 0x75,
	0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6d, 0x69, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x66, 0x75, 0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x42,
	0x0b, 0x0a, 0x09, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x55, 0x72, 0x6c, 0x42, 0x09, 0x0a, 0x07,
	0x5f, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x22, 0xf9, 0x03, 0x0a, 0x0c, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x43, 0x61, 0x72, 0x52, 0x65, 0x71, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x07, 0x62, 0x72, 0x61, 0x6e,
	0x64, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x07, 0x62, 0x72, 0x61,
	0x6e, 0x64, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x73, 0x65, 0x72, 0x69, 0x65,
	0x73, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x48, 0x01, 0x52, 0x08, 0x73, 0x65, 0x72,
	0x69, 0x65, 0x73, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x17, 0x0a, 0x04, 0x79, 0x65, 0x61, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x48,
	0x03, 0x52, 0x04, 0x79, 0x65, 0x61, 0x72, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x68, 0x6f,
	0x72, 0x73, 0x65, 0x5f, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x48,
	0x04, 0x52, 0x0a, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x88, 0x01, 0x01,
	0x12, 0x1b, 0x0a, 0x06, 0x74, 0x6f, 0x72, 0x71, 0x75, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05,
	0x48, 0x05, 0x52, 0x06, 0x74, 0x6f, 0x72, 0x71, 0x75, 0x65, 0x88, 0x01, 0x01, 0x12, 0x3a, 0x0a,
	0x0c, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63, 0x61, 0x72, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x6d,
	0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x48, 0x06, 0x52, 0x0c, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6d,
	0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x2e, 0x0a, 0x08, 0x66, 0x75, 0x65,
	0x6c, 0x54, 0x79, 0x70, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x63, 0x61,
	0x72, 0x2e, 0x46, 0x75, 0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x48, 0x07, 0x52, 0x08, 0x66, 0x75,
	0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x69, 0x6d, 0x61,
	0x67, 0x65, 0x55, 0x72, 0x6c, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x48, 0x08, 0x52, 0x08, 0x69,
	0x6d, 0x61, 0x67, 0x65, 0x55, 0x72, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x72, 0x65,
	0x76, 0x69, 0x65, 0x77, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x48, 0x09, 0x52, 0x06, 0x72, 0x65,
	0x76, 0x69, 0x65, 0x77, 0x88, 0x01, 0x01, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x62, 0x72, 0x61, 0x6e,
	0x64, 0x49, 0x64, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x49, 0x64,
	0x42, 0x07, 0x0a, 0x05, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x79, 0x65,
	0x61, 0x72, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x5f, 0x70, 0x6f, 0x77,
	0x65, 0x72, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x74, 0x6f, 0x72, 0x71, 0x75, 0x65, 0x42, 0x0f, 0x0a,
	0x0d, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x42, 0x0b,
	0x0a, 0x09, 0x5f, 0x66, 0x75, 0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x42, 0x0b, 0x0a, 0x09, 0x5f,
	0x69, 0x6d, 0x61, 0x67, 0x65, 0x55, 0x72, 0x6c, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x72, 0x65, 0x76,
	0x69, 0x65, 0x77, 0x22, 0x1e, 0x0a, 0x0c, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x61, 0x72,
	0x52, 0x65, 0x71, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x69, 0x64, 0x22, 0x1d, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x42, 0x72, 0x61, 0x6e, 0x64, 0x52,
	0x65, 0x71, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02,
	0x69, 0x64, 0x22, 0xfd, 0x01, 0x0a, 0x0e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x72, 0x61,
	0x6e, 0x64, 0x52, 0x65, 0x71, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2d, 0x0a, 0x0f, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x72, 0x79, 0x4f, 0x66, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x00, 0x52, 0x0f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x4f, 0x66, 0x4f,
	0x72, 0x69, 0x67, 0x69, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x0b, 0x66, 0x6f, 0x75, 0x6e,
	0x64, 0x65, 0x64, 0x59, 0x65, 0x61, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x48, 0x01, 0x52,
	0x0b, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x65, 0x64, 0x59, 0x65, 0x61, 0x72, 0x88, 0x01, 0x01, 0x12,
	0x23, 0x0a, 0x0a, 0x77, 0x65, 0x62, 0x73, 0x69, 0x74, 0x65, 0x55, 0x72, 0x6c, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x0a, 0x77, 0x65, 0x62, 0x73, 0x69, 0x74, 0x65, 0x55, 0x72,
	0x6c, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07, 0x6c, 0x6f, 0x67, 0x6f, 0x55, 0x72, 0x6c, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x07, 0x6c, 0x6f, 0x67, 0x6f, 0x55, 0x72, 0x6c,
	0x88, 0x01, 0x01, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x4f,
	0x66, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x66, 0x6f, 0x75, 0x6e,
	0x64, 0x65, 0x64, 0x59, 0x65, 0x61, 0x72, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x77, 0x65, 0x62, 0x73,
	0x69, 0x74, 0x65, 0x55, 0x72, 0x6c, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x6c, 0x6f, 0x67, 0x6f, 0x55,
	0x72, 0x6c, 0x22, 0xa7, 0x02, 0x0a, 0x0e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x72, 0x61,
	0x6e, 0x64, 0x52, 0x65, 0x71, 0x12, 0x13, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x00, 0x52, 0x02, 0x69, 0x64, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x2d, 0x0a, 0x0f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x4f, 0x66,
	0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x0f,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x4f, 0x66, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x88,
	0x01, 0x01, 0x12, 0x25, 0x0a, 0x0b, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x65, 0x64, 0x59, 0x65, 0x61,
	0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x48, 0x03, 0x52, 0x0b, 0x66, 0x6f, 0x75, 0x6e, 0x64,
	0x65, 0x64, 0x59, 0x65, 0x61, 0x72, 0x88, 0x01, 0x01, 0x12, 0x23, 0x0a, 0x0a, 0x77, 0x65, 0x62,
	0x73, 0x69, 0x74, 0x65, 0x55, 0x72, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x04, 0x52,
	0x0a, 0x77, 0x65, 0x62, 0x73, 0x69, 0x74, 0x65, 0x55, 0x72, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x1d,
	0x0a, 0x07, 0x6c, 0x6f, 0x67, 0x6f, 0x55, 0x72, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x05, 0x52, 0x07, 0x6c, 0x6f, 0x67, 0x6f, 0x55, 0x72, 0x6c, 0x88, 0x01, 0x01, 0x42, 0x05, 0x0a,
	0x03, 0x5f, 0x69, 0x64, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x12, 0x0a,
	0x10, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x4f, 0x66, 0x4f, 0x72, 0x69, 0x67, 0x69,
	0x6e, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x65, 0x64, 0x59, 0x65, 0x61,
	0x72, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x77, 0x65, 0x62, 0x73, 0x69, 0x74, 0x65, 0x55, 0x72, 0x6c,
	0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x6c, 0x6f, 0x67, 0x6f, 0x55, 0x72, 0x6c, 0x22, 0x1e, 0x0a, 0x0c,
	0x47, 0x65, 0x74, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x52, 0x65, 0x71, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x22, 0x3f, 0x0a, 0x0f,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x52, 0x65, 0x71, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x72, 0x61, 0x6e, 0x64, 0x49, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x62, 0x72, 0x61, 0x6e, 0x64, 0x49, 0x64, 0x22, 0x4f, 0x0a,
	0x0f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x52, 0x65, 0x71,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x72, 0x61, 0x6e, 0x64, 0x49, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x62, 0x72, 0x61, 0x6e, 0x64, 0x49, 0x64, 0x22, 0x6f,
	0x0a, 0x0f, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x46, 0x6f, 0x72, 0x43, 0x61, 0x72, 0x52, 0x65,
	0x71, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x62, 0x79,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x62, 0x79, 0x12,
	0x18, 0x0a, 0x07, 0x73, 0x74, 0x61, 0x72, 0x74, 0x41, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x07, 0x73, 0x74, 0x61, 0x72, 0x74, 0x41, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d,
	0x69, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x22,
	0x71, 0x0a, 0x11, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x46, 0x6f, 0x72, 0x42, 0x72, 0x61, 0x6e,
	0x64, 0x52, 0x65, 0x71, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x62, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x62, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x74, 0x61, 0x72, 0x74, 0x41, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x07, 0x73, 0x74, 0x61, 0x72, 0x74, 0x41, 0x74, 0x12, 0x14, 0x0a, 0x05,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x69, 0x6d,
	0x69, 0x74, 0x22, 0x72, 0x0a, 0x12, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x46, 0x6f, 0x72, 0x53,
	0x65, 0x72, 0x69, 0x65, 0x73, 0x52, 0x65, 0x71, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x18, 0x0a, 0x07,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x62, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x62, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x74, 0x61, 0x72, 0x74, 0x41,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x73, 0x74, 0x61, 0x72, 0x74, 0x41, 0x74,
	0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x22, 0x45, 0x0a, 0x0f, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x46, 0x6f, 0x72, 0x43, 0x61, 0x72, 0x52, 0x65, 0x73, 0x12, 0x1c, 0x0a, 0x04, 0x63, 0x61, 0x72,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x63, 0x61, 0x72, 0x2e, 0x43, 0x61,
	0x72, 0x52, 0x04, 0x63, 0x61, 0x72, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x22, 0x4d, 0x0a,
	0x11, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x46, 0x6f, 0x72, 0x42, 0x72, 0x61, 0x6e, 0x64, 0x52,
	0x65, 0x73, 0x12, 0x22, 0x0a, 0x06, 0x62, 0x72, 0x61, 0x6e, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x63, 0x61, 0x72, 0x2e, 0x42, 0x72, 0x61, 0x6e, 0x64, 0x52, 0x06,
	0x62, 0x72, 0x61, 0x6e, 0x64, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x22, 0x4f, 0x0a, 0x12,
	0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x46, 0x6f, 0x72, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x52,
	0x65, 0x73, 0x12, 0x23, 0x0a, 0x06, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x63, 0x61, 0x72, 0x2e, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x52,
	0x06, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x22, 0xbe, 0x01,
	0x0a, 0x11, 0x47, 0x65, 0x74, 0x43, 0x61, 0x72, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x52, 0x65, 0x73, 0x12, 0x22, 0x0a, 0x06, 0x62, 0x72, 0x61, 0x6e, 0x64, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x63, 0x61, 0x72, 0x2e, 0x42, 0x72, 0x61, 0x6e, 0x64, 0x52,
	0x06, 0x62, 0x72, 0x61, 0x6e, 0x64, 0x73, 0x12, 0x23, 0x0a, 0x06, 0x73, 0x65, 0x72, 0x69, 0x65,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x63, 0x61, 0x72, 0x2e, 0x53, 0x65,
	0x72, 0x69, 0x65, 0x73, 0x52, 0x06, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x12, 0x29, 0x0a, 0x08,
	0x66, 0x75, 0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d,
	0x2e, 0x63, 0x61, 0x72, 0x2e, 0x46, 0x75, 0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x66,
	0x75, 0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x35, 0x0a, 0x0c, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e,
	0x63, 0x61, 0x72, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x52, 0x0c, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x32, 0xc8,
	0x05, 0x0a, 0x0a, 0x43, 0x61, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x22, 0x0a,
	0x06, 0x47, 0x65, 0x74, 0x43, 0x61, 0x72, 0x12, 0x0e, 0x2e, 0x63, 0x61, 0x72, 0x2e, 0x47, 0x65,
	0x74, 0x43, 0x61, 0x72, 0x52, 0x65, 0x71, 0x1a, 0x08, 0x2e, 0x63, 0x61, 0x72, 0x2e, 0x43, 0x61,
	0x72, 0x12, 0x2a, 0x0a, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x61, 0x72, 0x12, 0x11,
	0x2e, 0x63, 0x61, 0x72, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x61, 0x72, 0x52, 0x65,
	0x71, 0x1a, 0x0a, 0x2e, 0x63, 0x61, 0x72, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x2a, 0x0a,
	0x09, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x61, 0x72, 0x12, 0x11, 0x2e, 0x63, 0x61, 0x72,
	0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x61, 0x72, 0x52, 0x65, 0x71, 0x1a, 0x0a, 0x2e,
	0x63, 0x61, 0x72, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x2a, 0x0a, 0x09, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x43, 0x61, 0x72, 0x12, 0x11, 0x2e, 0x63, 0x61, 0x72, 0x2e, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x43, 0x61, 0x72, 0x52, 0x65, 0x71, 0x1a, 0x0a, 0x2e, 0x63, 0x61, 0x72, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x3a, 0x0a, 0x0c, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x46,
	0x6f, 0x72, 0x43, 0x61, 0x72, 0x12, 0x14, 0x2e, 0x63, 0x61, 0x72, 0x2e, 0x53, 0x65, 0x61, 0x72,
	0x63, 0x68, 0x46, 0x6f, 0x72, 0x43, 0x61, 0x72, 0x52, 0x65, 0x71, 0x1a, 0x14, 0x2e, 0x63, 0x61,
	0x72, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x46, 0x6f, 0x72, 0x43, 0x61, 0x72, 0x52, 0x65,
	0x73, 0x12, 0x28, 0x0a, 0x08, 0x47, 0x65, 0x74, 0x42, 0x72, 0x61, 0x6e, 0x64, 0x12, 0x10, 0x2e,
	0x63, 0x61, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x72, 0x61, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x1a,
	0x0a, 0x2e, 0x63, 0x61, 0x72, 0x2e, 0x42, 0x72, 0x61, 0x6e, 0x64, 0x12, 0x2e, 0x0a, 0x0b, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x72, 0x61, 0x6e, 0x64, 0x12, 0x13, 0x2e, 0x63, 0x61, 0x72,
	0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x72, 0x61, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x1a,
	0x0a, 0x2e, 0x63, 0x61, 0x72, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x2e, 0x0a, 0x0b, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x72, 0x61, 0x6e, 0x64, 0x12, 0x13, 0x2e, 0x63, 0x61, 0x72,
	0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x72, 0x61, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x1a,
	0x0a, 0x2e, 0x63, 0x61, 0x72, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x40, 0x0a, 0x0e, 0x53,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x46, 0x6f, 0x72, 0x42, 0x72, 0x61, 0x6e, 0x64, 0x12, 0x16, 0x2e,
	0x63, 0x61, 0x72, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x46, 0x6f, 0x72, 0x42, 0x72, 0x61,
	0x6e, 0x64, 0x52, 0x65, 0x71, 0x1a, 0x16, 0x2e, 0x63, 0x61, 0x72, 0x2e, 0x53, 0x65, 0x61, 0x72,
	0x63, 0x68, 0x46, 0x6f, 0x72, 0x42, 0x72, 0x61, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x12, 0x2b, 0x0a,
	0x09, 0x47, 0x65, 0x74, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x12, 0x11, 0x2e, 0x63, 0x61, 0x72,
	0x2e, 0x47, 0x65, 0x74, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x0b, 0x2e,
	0x63, 0x61, 0x72, 0x2e, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x12, 0x30, 0x0a, 0x0c, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x12, 0x14, 0x2e, 0x63, 0x61, 0x72,
	0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x52, 0x65, 0x71,
	0x1a, 0x0a, 0x2e, 0x63, 0x61, 0x72, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x30, 0x0a, 0x0c,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x12, 0x14, 0x2e, 0x63,
	0x61, 0x72, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x52,
	0x65, 0x71, 0x1a, 0x0a, 0x2e, 0x63, 0x61, 0x72, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x43,
	0x0a, 0x0f, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x46, 0x6f, 0x72, 0x53, 0x65, 0x72, 0x69, 0x65,
	0x73, 0x12, 0x17, 0x2e, 0x63, 0x61, 0x72, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x46, 0x6f,
	0x72, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x17, 0x2e, 0x63, 0x61, 0x72,
	0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x46, 0x6f, 0x72, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73,
	0x52, 0x65, 0x73, 0x12, 0x34, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x43, 0x61, 0x72, 0x4d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x0a, 0x2e, 0x63, 0x61, 0x72, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x1a, 0x16, 0x2e, 0x63, 0x61, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x61, 0x72, 0x4d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x65, 0x73, 0x42, 0x33, 0x5a, 0x31, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x64, 0x61, 0x69, 0x6c, 0x6f, 0x69, 0x32, 0x38,
	0x30, 0x37, 0x30, 0x32, 0x2f, 0x73, 0x65, 0x31, 0x32, 0x31, 0x2f, 0x63, 0x61, 0x72, 0x2d, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x63, 0x61, 0x72, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_car_proto_rawDescOnce sync.Once
	file_car_proto_rawDescData = file_car_proto_rawDesc
)

func file_car_proto_rawDescGZIP() []byte {
	file_car_proto_rawDescOnce.Do(func() {
		file_car_proto_rawDescData = protoimpl.X.CompressGZIP(file_car_proto_rawDescData)
	})
	return file_car_proto_rawDescData
}

var file_car_proto_msgTypes = make([]protoimpl.MessageInfo, 23)
var file_car_proto_goTypes = []interface{}{
	(*Car)(nil),                // 0: car.Car
	(*Brand)(nil),              // 1: car.Brand
	(*Series)(nil),             // 2: car.Series
	(*Transmission)(nil),       // 3: car.Transmission
	(*FuelType)(nil),           // 4: car.FuelType
	(*Empty)(nil),              // 5: car.Empty
	(*GetCarReq)(nil),          // 6: car.GetCarReq
	(*CreateCarReq)(nil),       // 7: car.CreateCarReq
	(*UpdateCarReq)(nil),       // 8: car.UpdateCarReq
	(*DeleteCarReq)(nil),       // 9: car.DeleteCarReq
	(*GetBrandReq)(nil),        // 10: car.GetBrandReq
	(*CreateBrandReq)(nil),     // 11: car.CreateBrandReq
	(*UpdateBrandReq)(nil),     // 12: car.UpdateBrandReq
	(*GetSeriesReq)(nil),       // 13: car.GetSeriesReq
	(*CreateSeriesReq)(nil),    // 14: car.CreateSeriesReq
	(*UpdateSeriesReq)(nil),    // 15: car.UpdateSeriesReq
	(*SearchForCarReq)(nil),    // 16: car.SearchForCarReq
	(*SearchForBrandReq)(nil),  // 17: car.SearchForBrandReq
	(*SearchForSeriesReq)(nil), // 18: car.SearchForSeriesReq
	(*SearchForCarRes)(nil),    // 19: car.SearchForCarRes
	(*SearchForBrandRes)(nil),  // 20: car.SearchForBrandRes
	(*SearchForSeriesRes)(nil), // 21: car.SearchForSeriesRes
	(*GetCarMetadataRes)(nil),  // 22: car.GetCarMetadataRes
}
var file_car_proto_depIdxs = []int32{
	1,  // 0: car.Car.brand:type_name -> car.Brand
	2,  // 1: car.Car.series:type_name -> car.Series
	3,  // 2: car.Car.transmission:type_name -> car.Transmission
	4,  // 3: car.Car.fuelType:type_name -> car.FuelType
	3,  // 4: car.CreateCarReq.transmission:type_name -> car.Transmission
	4,  // 5: car.CreateCarReq.fuelType:type_name -> car.FuelType
	3,  // 6: car.UpdateCarReq.transmission:type_name -> car.Transmission
	4,  // 7: car.UpdateCarReq.fuelType:type_name -> car.FuelType
	0,  // 8: car.SearchForCarRes.cars:type_name -> car.Car
	1,  // 9: car.SearchForBrandRes.brands:type_name -> car.Brand
	2,  // 10: car.SearchForSeriesRes.series:type_name -> car.Series
	1,  // 11: car.GetCarMetadataRes.brands:type_name -> car.Brand
	2,  // 12: car.GetCarMetadataRes.series:type_name -> car.Series
	4,  // 13: car.GetCarMetadataRes.fuelType:type_name -> car.FuelType
	3,  // 14: car.GetCarMetadataRes.transmission:type_name -> car.Transmission
	6,  // 15: car.CarService.GetCar:input_type -> car.GetCarReq
	7,  // 16: car.CarService.CreateCar:input_type -> car.CreateCarReq
	8,  // 17: car.CarService.UpdateCar:input_type -> car.UpdateCarReq
	9,  // 18: car.CarService.DeleteCar:input_type -> car.DeleteCarReq
	16, // 19: car.CarService.SearchForCar:input_type -> car.SearchForCarReq
	10, // 20: car.CarService.GetBrand:input_type -> car.GetBrandReq
	11, // 21: car.CarService.CreateBrand:input_type -> car.CreateBrandReq
	12, // 22: car.CarService.UpdateBrand:input_type -> car.UpdateBrandReq
	17, // 23: car.CarService.SearchForBrand:input_type -> car.SearchForBrandReq
	13, // 24: car.CarService.GetSeries:input_type -> car.GetSeriesReq
	14, // 25: car.CarService.CreateSeries:input_type -> car.CreateSeriesReq
	15, // 26: car.CarService.UpdateSeries:input_type -> car.UpdateSeriesReq
	18, // 27: car.CarService.SearchForSeries:input_type -> car.SearchForSeriesReq
	5,  // 28: car.CarService.GetCarMetadata:input_type -> car.Empty
	0,  // 29: car.CarService.GetCar:output_type -> car.Car
	5,  // 30: car.CarService.CreateCar:output_type -> car.Empty
	5,  // 31: car.CarService.UpdateCar:output_type -> car.Empty
	5,  // 32: car.CarService.DeleteCar:output_type -> car.Empty
	19, // 33: car.CarService.SearchForCar:output_type -> car.SearchForCarRes
	1,  // 34: car.CarService.GetBrand:output_type -> car.Brand
	5,  // 35: car.CarService.CreateBrand:output_type -> car.Empty
	5,  // 36: car.CarService.UpdateBrand:output_type -> car.Empty
	20, // 37: car.CarService.SearchForBrand:output_type -> car.SearchForBrandRes
	2,  // 38: car.CarService.GetSeries:output_type -> car.Series
	5,  // 39: car.CarService.CreateSeries:output_type -> car.Empty
	5,  // 40: car.CarService.UpdateSeries:output_type -> car.Empty
	21, // 41: car.CarService.SearchForSeries:output_type -> car.SearchForSeriesRes
	22, // 42: car.CarService.GetCarMetadata:output_type -> car.GetCarMetadataRes
	29, // [29:43] is the sub-list for method output_type
	15, // [15:29] is the sub-list for method input_type
	15, // [15:15] is the sub-list for extension type_name
	15, // [15:15] is the sub-list for extension extendee
	0,  // [0:15] is the sub-list for field type_name
}

func init() { file_car_proto_init() }
func file_car_proto_init() {
	if File_car_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_car_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Car); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_car_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Brand); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_car_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Series); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_car_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Transmission); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_car_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FuelType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_car_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Empty); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_car_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCarReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_car_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateCarReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_car_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateCarReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_car_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteCarReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_car_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetBrandReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_car_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateBrandReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_car_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateBrandReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_car_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSeriesReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_car_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateSeriesReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_car_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateSeriesReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_car_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchForCarReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_car_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchForBrandReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_car_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchForSeriesReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_car_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchForCarRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_car_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchForBrandRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_car_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchForSeriesRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_car_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCarMetadataRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_car_proto_msgTypes[0].OneofWrappers = []interface{}{}
	file_car_proto_msgTypes[1].OneofWrappers = []interface{}{}
	file_car_proto_msgTypes[3].OneofWrappers = []interface{}{}
	file_car_proto_msgTypes[4].OneofWrappers = []interface{}{}
	file_car_proto_msgTypes[7].OneofWrappers = []interface{}{}
	file_car_proto_msgTypes[8].OneofWrappers = []interface{}{}
	file_car_proto_msgTypes[11].OneofWrappers = []interface{}{}
	file_car_proto_msgTypes[12].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_car_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   23,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_car_proto_goTypes,
		DependencyIndexes: file_car_proto_depIdxs,
		MessageInfos:      file_car_proto_msgTypes,
	}.Build()
	File_car_proto = out.File
	file_car_proto_rawDesc = nil
	file_car_proto_goTypes = nil
	file_car_proto_depIdxs = nil
}
