// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: car.proto

package car

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CarServiceClient is the client API for CarService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CarServiceClient interface {
	GetCar(ctx context.Context, in *GetCarReq, opts ...grpc.CallOption) (*Car, error)
	CreateCar(ctx context.Context, in *CreateCarReq, opts ...grpc.CallOption) (*Empty, error)
	UpdateCar(ctx context.Context, in *UpdateCarReq, opts ...grpc.CallOption) (*Empty, error)
	DeleteCar(ctx context.Context, in *DeleteCarReq, opts ...grpc.CallOption) (*Empty, error)
	SearchForCar(ctx context.Context, in *SearchForCarReq, opts ...grpc.CallOption) (*SearchForCarRes, error)
	GetBrand(ctx context.Context, in *GetBrandReq, opts ...grpc.CallOption) (*Brand, error)
	CreateBrand(ctx context.Context, in *CreateBrandReq, opts ...grpc.CallOption) (*Empty, error)
	UpdateBrand(ctx context.Context, in *UpdateBrandReq, opts ...grpc.CallOption) (*Empty, error)
	SearchForBrand(ctx context.Context, in *SearchForBrandReq, opts ...grpc.CallOption) (*SearchForBrandRes, error)
	GetSeries(ctx context.Context, in *GetSeriesReq, opts ...grpc.CallOption) (*Series, error)
	CreateSeries(ctx context.Context, in *CreateSeriesReq, opts ...grpc.CallOption) (*Empty, error)
	UpdateSeries(ctx context.Context, in *UpdateSeriesReq, opts ...grpc.CallOption) (*Empty, error)
	SearchForSeries(ctx context.Context, in *SearchForSeriesReq, opts ...grpc.CallOption) (*SearchForSeriesRes, error)
	GetCarMetadata(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*GetCarMetadataRes, error)
}

type carServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCarServiceClient(cc grpc.ClientConnInterface) CarServiceClient {
	return &carServiceClient{cc}
}

func (c *carServiceClient) GetCar(ctx context.Context, in *GetCarReq, opts ...grpc.CallOption) (*Car, error) {
	out := new(Car)
	err := c.cc.Invoke(ctx, "/car.CarService/GetCar", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *carServiceClient) CreateCar(ctx context.Context, in *CreateCarReq, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/car.CarService/CreateCar", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *carServiceClient) UpdateCar(ctx context.Context, in *UpdateCarReq, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/car.CarService/UpdateCar", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *carServiceClient) DeleteCar(ctx context.Context, in *DeleteCarReq, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/car.CarService/DeleteCar", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *carServiceClient) SearchForCar(ctx context.Context, in *SearchForCarReq, opts ...grpc.CallOption) (*SearchForCarRes, error) {
	out := new(SearchForCarRes)
	err := c.cc.Invoke(ctx, "/car.CarService/SearchForCar", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *carServiceClient) GetBrand(ctx context.Context, in *GetBrandReq, opts ...grpc.CallOption) (*Brand, error) {
	out := new(Brand)
	err := c.cc.Invoke(ctx, "/car.CarService/GetBrand", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *carServiceClient) CreateBrand(ctx context.Context, in *CreateBrandReq, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/car.CarService/CreateBrand", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *carServiceClient) UpdateBrand(ctx context.Context, in *UpdateBrandReq, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/car.CarService/UpdateBrand", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *carServiceClient) SearchForBrand(ctx context.Context, in *SearchForBrandReq, opts ...grpc.CallOption) (*SearchForBrandRes, error) {
	out := new(SearchForBrandRes)
	err := c.cc.Invoke(ctx, "/car.CarService/SearchForBrand", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *carServiceClient) GetSeries(ctx context.Context, in *GetSeriesReq, opts ...grpc.CallOption) (*Series, error) {
	out := new(Series)
	err := c.cc.Invoke(ctx, "/car.CarService/GetSeries", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *carServiceClient) CreateSeries(ctx context.Context, in *CreateSeriesReq, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/car.CarService/CreateSeries", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *carServiceClient) UpdateSeries(ctx context.Context, in *UpdateSeriesReq, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/car.CarService/UpdateSeries", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *carServiceClient) SearchForSeries(ctx context.Context, in *SearchForSeriesReq, opts ...grpc.CallOption) (*SearchForSeriesRes, error) {
	out := new(SearchForSeriesRes)
	err := c.cc.Invoke(ctx, "/car.CarService/SearchForSeries", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *carServiceClient) GetCarMetadata(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*GetCarMetadataRes, error) {
	out := new(GetCarMetadataRes)
	err := c.cc.Invoke(ctx, "/car.CarService/GetCarMetadata", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CarServiceServer is the server API for CarService service.
// All implementations must embed UnimplementedCarServiceServer
// for forward compatibility
type CarServiceServer interface {
	GetCar(context.Context, *GetCarReq) (*Car, error)
	CreateCar(context.Context, *CreateCarReq) (*Empty, error)
	UpdateCar(context.Context, *UpdateCarReq) (*Empty, error)
	DeleteCar(context.Context, *DeleteCarReq) (*Empty, error)
	SearchForCar(context.Context, *SearchForCarReq) (*SearchForCarRes, error)
	GetBrand(context.Context, *GetBrandReq) (*Brand, error)
	CreateBrand(context.Context, *CreateBrandReq) (*Empty, error)
	UpdateBrand(context.Context, *UpdateBrandReq) (*Empty, error)
	SearchForBrand(context.Context, *SearchForBrandReq) (*SearchForBrandRes, error)
	GetSeries(context.Context, *GetSeriesReq) (*Series, error)
	CreateSeries(context.Context, *CreateSeriesReq) (*Empty, error)
	UpdateSeries(context.Context, *UpdateSeriesReq) (*Empty, error)
	SearchForSeries(context.Context, *SearchForSeriesReq) (*SearchForSeriesRes, error)
	GetCarMetadata(context.Context, *Empty) (*GetCarMetadataRes, error)
	mustEmbedUnimplementedCarServiceServer()
}

// UnimplementedCarServiceServer must be embedded to have forward compatible implementations.
type UnimplementedCarServiceServer struct {
}

func (UnimplementedCarServiceServer) GetCar(context.Context, *GetCarReq) (*Car, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCar not implemented")
}
func (UnimplementedCarServiceServer) CreateCar(context.Context, *CreateCarReq) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCar not implemented")
}
func (UnimplementedCarServiceServer) UpdateCar(context.Context, *UpdateCarReq) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCar not implemented")
}
func (UnimplementedCarServiceServer) DeleteCar(context.Context, *DeleteCarReq) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCar not implemented")
}
func (UnimplementedCarServiceServer) SearchForCar(context.Context, *SearchForCarReq) (*SearchForCarRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchForCar not implemented")
}
func (UnimplementedCarServiceServer) GetBrand(context.Context, *GetBrandReq) (*Brand, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBrand not implemented")
}
func (UnimplementedCarServiceServer) CreateBrand(context.Context, *CreateBrandReq) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBrand not implemented")
}
func (UnimplementedCarServiceServer) UpdateBrand(context.Context, *UpdateBrandReq) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateBrand not implemented")
}
func (UnimplementedCarServiceServer) SearchForBrand(context.Context, *SearchForBrandReq) (*SearchForBrandRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchForBrand not implemented")
}
func (UnimplementedCarServiceServer) GetSeries(context.Context, *GetSeriesReq) (*Series, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSeries not implemented")
}
func (UnimplementedCarServiceServer) CreateSeries(context.Context, *CreateSeriesReq) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSeries not implemented")
}
func (UnimplementedCarServiceServer) UpdateSeries(context.Context, *UpdateSeriesReq) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSeries not implemented")
}
func (UnimplementedCarServiceServer) SearchForSeries(context.Context, *SearchForSeriesReq) (*SearchForSeriesRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchForSeries not implemented")
}
func (UnimplementedCarServiceServer) GetCarMetadata(context.Context, *Empty) (*GetCarMetadataRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCarMetadata not implemented")
}
func (UnimplementedCarServiceServer) mustEmbedUnimplementedCarServiceServer() {}

// UnsafeCarServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CarServiceServer will
// result in compilation errors.
type UnsafeCarServiceServer interface {
	mustEmbedUnimplementedCarServiceServer()
}

func RegisterCarServiceServer(s grpc.ServiceRegistrar, srv CarServiceServer) {
	s.RegisterService(&CarService_ServiceDesc, srv)
}

func _CarService_GetCar_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCarReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CarServiceServer).GetCar(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/car.CarService/GetCar",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CarServiceServer).GetCar(ctx, req.(*GetCarReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CarService_CreateCar_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCarReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CarServiceServer).CreateCar(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/car.CarService/CreateCar",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CarServiceServer).CreateCar(ctx, req.(*CreateCarReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CarService_UpdateCar_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCarReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CarServiceServer).UpdateCar(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/car.CarService/UpdateCar",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CarServiceServer).UpdateCar(ctx, req.(*UpdateCarReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CarService_DeleteCar_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCarReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CarServiceServer).DeleteCar(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/car.CarService/DeleteCar",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CarServiceServer).DeleteCar(ctx, req.(*DeleteCarReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CarService_SearchForCar_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchForCarReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CarServiceServer).SearchForCar(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/car.CarService/SearchForCar",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CarServiceServer).SearchForCar(ctx, req.(*SearchForCarReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CarService_GetBrand_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBrandReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CarServiceServer).GetBrand(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/car.CarService/GetBrand",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CarServiceServer).GetBrand(ctx, req.(*GetBrandReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CarService_CreateBrand_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateBrandReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CarServiceServer).CreateBrand(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/car.CarService/CreateBrand",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CarServiceServer).CreateBrand(ctx, req.(*CreateBrandReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CarService_UpdateBrand_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateBrandReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CarServiceServer).UpdateBrand(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/car.CarService/UpdateBrand",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CarServiceServer).UpdateBrand(ctx, req.(*UpdateBrandReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CarService_SearchForBrand_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchForBrandReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CarServiceServer).SearchForBrand(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/car.CarService/SearchForBrand",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CarServiceServer).SearchForBrand(ctx, req.(*SearchForBrandReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CarService_GetSeries_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSeriesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CarServiceServer).GetSeries(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/car.CarService/GetSeries",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CarServiceServer).GetSeries(ctx, req.(*GetSeriesReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CarService_CreateSeries_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSeriesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CarServiceServer).CreateSeries(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/car.CarService/CreateSeries",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CarServiceServer).CreateSeries(ctx, req.(*CreateSeriesReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CarService_UpdateSeries_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSeriesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CarServiceServer).UpdateSeries(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/car.CarService/UpdateSeries",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CarServiceServer).UpdateSeries(ctx, req.(*UpdateSeriesReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CarService_SearchForSeries_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchForSeriesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CarServiceServer).SearchForSeries(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/car.CarService/SearchForSeries",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CarServiceServer).SearchForSeries(ctx, req.(*SearchForSeriesReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CarService_GetCarMetadata_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CarServiceServer).GetCarMetadata(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/car.CarService/GetCarMetadata",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CarServiceServer).GetCarMetadata(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// CarService_ServiceDesc is the grpc.ServiceDesc for CarService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CarService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "car.CarService",
	HandlerType: (*CarServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetCar",
			Handler:    _CarService_GetCar_Handler,
		},
		{
			MethodName: "CreateCar",
			Handler:    _CarService_CreateCar_Handler,
		},
		{
			MethodName: "UpdateCar",
			Handler:    _CarService_UpdateCar_Handler,
		},
		{
			MethodName: "DeleteCar",
			Handler:    _CarService_DeleteCar_Handler,
		},
		{
			MethodName: "SearchForCar",
			Handler:    _CarService_SearchForCar_Handler,
		},
		{
			MethodName: "GetBrand",
			Handler:    _CarService_GetBrand_Handler,
		},
		{
			MethodName: "CreateBrand",
			Handler:    _CarService_CreateBrand_Handler,
		},
		{
			MethodName: "UpdateBrand",
			Handler:    _CarService_UpdateBrand_Handler,
		},
		{
			MethodName: "SearchForBrand",
			Handler:    _CarService_SearchForBrand_Handler,
		},
		{
			MethodName: "GetSeries",
			Handler:    _CarService_GetSeries_Handler,
		},
		{
			MethodName: "CreateSeries",
			Handler:    _CarService_CreateSeries_Handler,
		},
		{
			MethodName: "UpdateSeries",
			Handler:    _CarService_UpdateSeries_Handler,
		},
		{
			MethodName: "SearchForSeries",
			Handler:    _CarService_SearchForSeries_Handler,
		},
		{
			MethodName: "GetCarMetadata",
			Handler:    _CarService_GetCarMetadata_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "car.proto",
}
