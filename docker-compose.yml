version: "3.9"

services:
  go-backend:
    container_name: go-backend
    build: ./go-backend/
    environment:
      DATABASE_URL: "host=db user=postgres password=postgres dbname=postgres sslmode=disable"
    networks:
      - client
      - grpc
      - db
    ports:
      - "8000:8000"
    volumes:
      - ./go-backend/:/app
    depends_on:
      - redis
      - db

  user-service:
    container_name: user-service
    build: ./user-service/
    environment:
      DATABASE_URL: "host=db user=postgres password=postgres dbname=postgres sslmode=disable"
    networks:
      - grpc
      - db
    volumes:
      - ./user-service/:/app
    depends_on:
      - db

  auth-service:
    container_name: auth-service
    build: ./auth-service/
    networks:
      - db
    volumes:
      - ./auth-service/:/app

  car-service:
    container_name: car-service
    build: ./car-service/
    networks:
      - db
    volumes:
      - ./car-service/:/app

  python-backend:
    build: ./python-backend/
    container_name: python-backend
    stop_signal: SIGINT
    networks:
      - grpc

  frontend:
    build: ./frontend
    container_name: frontend
    ports:
      - "3000:3000"
    restart: on-failure
    volumes:
      - ./frontend/:/app
      - /app/node_modules
      - /app/.next
    networks:
      - client

  redis:
    image: "redis:7"
    container_name: redis
    restart: always
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    networks:
      - db

  db:
    container_name: db
    image: postgres:15
    environment:
      POSTGRES_PASSWORD: postgres
      POSTGRES_USER: postgres
      POSTGRES_DB: postgres
    volumes:
      - pgdata:/var/lib/postgresql/data
    ports:
      - 5432:5432
    networks:
      - db

networks:
  client: {}
  grpc: {}
  db: {}

volumes:
  redis-data: {}
  pgdata: {}
